---
resource_types:
  - name: cf-cli-resource
    type: docker-image
    source:
      repository: nulldriver/cf-cli-resource
      tag: latest

resources:
  - name: version
    type: semver
    source:
      initial_version: "1.0.0"
      driver: git
      uri: ((git-repo-url))
      branch: version 
      file: version
      private_key: ((git-private-key))
      git_user: concourse@example.com
      commit_message: "[ci skip] Update version to %version%"

  - name: source 
    type: git
    source:
      uri: ((git-repo-url))
      branch: ((git-release-branch))
      private_key: ((git-private-key))

  # - name: gh-release
  #   type: github-release
  #   source:
  #     user: ((github-username))
  #     repository: ((github-repository))
  #     access_token: ((github-access-token))

  - name: release-candidate 
    type: s3
    source:
      endpoint: ((s3-endpoint))
      bucket: ((s3-release-bucket))
      access_key_id: ((s3-access-key-id))
      secret_access_key: ((s3-secret-access-key))
      regexp: rc/((application-name))-(.*).tgz

  - name: release-final
    type: s3
    source:
      endpoint: ((s3-endpoint))
      bucket: ((s3-release-bucket))
      access_key_id: ((s3-access-key-id))
      secret_access_key: ((s3-secret-access-key))
      regexp: final/((application-name))-(.*).tgz

  - name: pcf-dev
    type: cf-cli-resource
    source:
      api: ((cf-dev-api))
      org: ((cf-dev-org))
      space: ((cf-dev-space))
      username: ((cf-dev-username))
      password: ((cf-dev-password))
      skip_cert_check: false

  - name: pcf-staging
    type: cf-cli-resource
    source:
      api: ((cf-staging-api))
      org: ((cf-staging-org))
      space: ((cf-staging-space))
      username: ((cf-staging-username))
      password: ((cf-staging-password))
      skip_cert_check: false

  - name: pcf-perf
    type: cf-cli-resource
    source:
      api: ((cf-perf-api))
      org: ((cf-perf-org))
      space: ((cf-perf-space))
      username: ((cf-perf-username))
      password: ((cf-perf-password))
      skip_cert_check: false

jobs:
  - name: create-rc
    serial_groups: [version]
    plan:
    - aggregate:
      - get: source
        trigger: true
      - get: version
        params: {pre: rev}

    - task: build
      file: source/ci/tasks/build.yml
    
    - task: package-release
      file: source/ci/tasks/package-release.yml
      params:
        ARTIFACT_NAME: ((application-name))

    - aggregate:
      - put: version
        params: {pre: rev}
      - put: release-candidate 
        params:
          file: tarball/*.tgz

  - name: deploy-dev
    serial_groups: [version]
    plan:
    - aggregate:
      - get: release
        resource: release-candidate
        passed: [create-rc]
        trigger: true
        params:
          unpack: true
      - get: source # To enable usage of this resource in shipit "passed" condition
        passed: [create-rc]
    - do:
      - put: pcf-dev
        params:
          command: push
          app_name: dev-((application-name))((application-deployment-suffix))
          path: release/application.jar
          manifest: release/manifests/development.yml
          no_start: true
      - put: pcf-dev
        params:
          command: bind-service
          app_name: dev-((application-name))((application-deployment-suffix))
          service_instance: pipeline-poc-db 
      - put: pcf-dev
        params:
          command: start
          app_name: dev-((application-name))((application-deployment-suffix))

  - name: shipit
    serial_groups: [version]
    plan:
    - aggregate:
      - get: release-candidate
        passed: [deploy-dev]
      - get: final-version
        resource: version 
        params: {bump: final}
      - get: next-version
        resource: version 
        params: {bump: minor}
      - get: source
        passed: [deploy-dev]

    - task: promote-release
      file: source/ci/tasks/promote-release.yml
      input_mapping:
        version: final-version
      params:
        ARTIFACT_NAME: ((application-name))

    - put: release-final
      params:
        file: final-release/*.tgz

    - task: bump-pom-version
      file: source/ci/tasks/bump-pom-version.yml
      params:
        RELEASE_BRANCH: ((git-release-branch))
        FINAL_VERSION_SUFFIX: "" # Could be .RELEASE for example
        NEXT_VERSION_SUFFIX: "-SNAPSHOT"

#    - put: gh-release
#      params:
#        name: final-version/version
#        tag: final-version/version
#        tag_prefix: v
#        globs:
#        - final-release/*.tgz

    - put: version
      params:
        bump: minor

  - name: deploy-staging
    plan:
    - aggregate:
      - get: release
        resource: release-final
        passed: [shipit]
        trigger: true
        params:
          unpack: true
    - do:
      - put: pcf-staging
        params:
          command: push
          app_name: staging-((application-name))((application-deployment-suffix))
          path: release/application.jar
          manifest: release/manifests/staging.yml
          no_start: true
      - put: pcf-staging
        params:
          command: bind-service
          app_name: staging-((application-name))((application-deployment-suffix))
          service_instance: pipeline-poc-db 
      - put: pcf-staging
        params:
          command: start
          app_name: staging-((application-name))((application-deployment-suffix))

  - name: deploy-perf
    plan:
    - aggregate:
      - get: release
        resource: release-final
        passed: [shipit]
        trigger: true
        params:
          unpack: true
    - do:
      - put: pcf-perf
        params:
          command: push
          app_name: perf-((application-name))((application-deployment-suffix))
          path: release/application.jar
          manifest: release/manifests/perf.yml
          no_start: true
      - put: pcf-perf
        params:
          command: bind-service
          app_name: perf-((application-name))((application-deployment-suffix))
          service_instance: pipeline-poc-db 
      - put: pcf-perf
        params:
          command: start
          app_name: perf-((application-name))((application-deployment-suffix))

#  - name: deploy-prod
#    plan:
#    - aggregate:
#      - get: release
#        passed: [shipit]
#        trigger: true
#        resource: release-final
#        params:
#          unpack: true
#    - put: pcf-prod
#      params:
#        manifest: release/manifests/prod.yml
#        path: release/application.jar
#        current_app_name: ((application-name))((application-deployment-suffix))
#        show_app_log: true
#        environment_variables:
#          SECURITY_OAUTH2_CLIENT_CLIENTID: ((oauth2-client-id))
#          SECURITY_OAUTH2_CLIENT_CLIENTSECRET: ((oauth2-client-secret))
